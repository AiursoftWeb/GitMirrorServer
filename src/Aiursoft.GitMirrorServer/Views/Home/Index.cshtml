@using System.Diagnostics
@using System.Reflection
@using Aiursoft.GitMirrorServer.BackgroundJobs
@{
    var process = Process.GetCurrentProcess();
}

<div class="jumbotron">
    <div class="container">
        <h1 class="display-4">Hola, @Context.Connection.RemoteIpAddress?.ToString()!</h1>
        @{
            var description = Assembly.GetExecutingAssembly().GetCustomAttribute<AssemblyDescriptionAttribute>()?.Description;
        }
        <p class="lead">@description</p>
    </div>
</div>
<div class="container mt-4" id="functions">
    <div class="row no-gutters">
        <div class="col-sm-12 px-1">
            <div class="card mb-2 tests-card">
                <div class="card-body">
                    <h5 class="card-title">Server Information</h5>
                    <div class="table-responsive">
                        <table class="table table-striped table-hover table-sm">
                            <tr>
                                <th>Name</th>
                                <th>Value</th>
                            </tr>
                            <tr>
                                <td>Directory</td>
                                <td>@Environment.CurrentDirectory</td>
                            </tr>
                            <tr>
                                <td>Machine Name</td>
                                <td>@Environment.MachineName</td>
                            </tr>
                            <tr>
                                <td>User Name</td>
                                <td>@Environment.UserDomainName\@Environment.UserName</td>
                            </tr>
                            <tr>
                                <td>.NET Version</td>
                                <td>@Environment.Version</td>
                            </tr>
                            <tr>
                                <td>Worker Process</td>
                                <td>
                                    [@process.Id] @process.ProcessName @(Environment.Is64BitProcess ? "(64-bit)" : "(32-bit)")</td>
                            </tr>
                            <tr>
                                <td>Start Time</td>
                                <td>@process.StartTime.ToUniversalTime() (UTC)</td>
                            </tr>
                            <tr>
                                <td>Memory</td>
                                <td>@(process.WorkingSet64 / 1024 / 1024) MB</td>
                            </tr>
                            <tr>
                                <td>Docker Container</td>
                                <td>@(Environment.GetEnvironmentVariable("DOTNET_RUNNING_IN_CONTAINER") == "true")</td>
                            </tr>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-sm-12 px-1">
            <div class="card mb-2 tests-card">
                <div class="card-body">
                    <h5 class="card-title">Mirror State</h5>

                    @* public static DateTime LastRunTime = DateTime.MinValue; *@
                    @* public static TimeSpan LastRunDuration = TimeSpan.Zero; *@
                    @* public static bool LastRunSuccess = false; *@
                    @* public static int SuccessMirrorCount = 0; *@
                    @* public static int FailMirrorCount = 0; *@
                    @* public static int TotalMirroredCount = 0; *@
                    @* public static int TotalMirrorServerConfigsCount = 0; *@
                    @* public static DateTime EstimatedNextRunTime = DateTime.MinValue; *@

                    <div class="table-responsive">
                        <table class="table table-striped table-hover table-sm">
                            <tr>
                                <th>Name</th>
                                <th>Value</th>
                            </tr>
                            <tr>
                                <td>Last Run Time</td>
                                <td>@MirrorJob.LastRunTime.ToUniversalTime() (UTC)</td>
                            </tr>
                            <tr>
                                <td>Last Run Duration</td>
                                <td>@MirrorJob.LastRunDuration</td>
                            </tr>
                            <tr>
                                <td>Last Run Success</td>
                                <td>@MirrorJob.LastRunSuccess</td>
                            </tr>
                            <tr>
                                <td>Success Mirror Count</td>
                                <td>@MirrorJob.SuccessMirrorCount</td>
                            </tr>
                            <tr>
                                <td>Fail Mirror Count</td>
                                <td>@MirrorJob.FailMirrorCount</td>
                            </tr>
                            <tr>
                                <td>Total Mirrored Count</td>
                                <td>@MirrorJob.TotalMirroredCount</td>
                            </tr>
                            <tr>
                                <td>Total Mirror Server Configs Count</td>
                                <td>@MirrorJob.TotalMirrorServerConfigsCount</td>
                            </tr>
                            <tr>
                                <td>Estimated Next Run Time</td>
                                <td>@MirrorJob.EstimatedNextRunTime.ToUniversalTime() (UTC)</td>
                            </tr>
                        </table>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>
